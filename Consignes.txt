Nouveau projet: symfony_ecom

Créer un nouveau projet Symfony
Configurer le fichier .env
Créer la nouvelle base de données
Créer un nouveau Controller, avec une fonction index
Faire en sorte que cette fonction index() affiche le message "Bienvenue, Symfony Ecom" dans son titre <h1>
========================================================================================================================================================================================================================================================================================================================================================
Récupérer le template indiqué, ainsi que les fichiers CSS correspondants, et l'adapter afin qu'il puisse s'afficher au sein de notre nouvelle application Symfony (excepté les images autre que les vignettes)
Faire en sorte que la structure de base soit présente dans base.html.twig, les éléments supplémentaires dans différents fichiers dans un dossier layout que vous allez créer
et faire en sorte que le coeur de la page, soit présent dans le fichier index.html.twig
(à la manière de notre projet précédent)

Création d'une nouvelle Entity Produit:

Les éléments qui caractérisent un Produit:
	- Name 			-> String, 255, Non Null
	- Price 		-> Float (Nombre à virgule), Non Null
	- Stock 		-> Integer (Entier), Non Null
	- Description 	-> Text, Non Null
	- Category		-> Relation avec Entité Category (ManyToOne)
	- Tag			-> Relation avec Entité Tag (ManyToMany)

Les éléments qui caractérisent une Catégorie:
	- Name			-> String, 255, Non Null
	- Description 	-> Text, Non null
	- Produit 		-> Relation avec l'Entité Produit (OneToMany)

Les éléments qui caractérisent un Tag:
	- Name 			-> String, 255, Non Null
	- Produit 		-> Relation avec l'Entité Produit (ManyToMany)

NE FAITES QUE PRODUIT ET TAG, NE PAS FAIRE L'ENTITY OU LES VARIABLES RELATIVES A CATEGORY
-
Utiliser Powershell pour créer une Entity:
	php bin/console make:entity (pour les relations 1toM ou Mto1 etc... rentrer le type "relation")
Ne pas utiliser le terminal pour créer les relations entre Entity, le faire à la main selon le modèle du projet précédent, puis écrire dans le terminal:
	php bin/console make:entity --regenerate App
========================================================================================================================================================================================================================================================================================================================================================
Télécharger orm-fixtures via Composer
Créer : 
Pour les Category: 5 Category: Armoire, Lit, Bureau, Chaise, Canapé
Pour les Produits: 15 Produits de votre choix
Pour les Tags: "Pas cher", "Promotion", "Bois", "Neuf", "Nouveau", etc
Faire cela en créant les trois classes Fixtures ProduitFixtures, TagFixtures et CategoryFixtures
========================================================================================================================================================================================================================================================================================================================================================
Ajouter les images dans le dossier img
========================================================================================================================================================================================================================================================================================================================================================
Nous possédons à présent une base pour la Vue de notre backoffice administrateur avec admin-dashboard. A présent, nous devons implémenter les différentes fonctions de Controller et les formulaires appropriés afin de pouvoir utiliser les différentes fonctionnalités du CRUD (Create, Read, Update, Delete) sur nos trois Entity.
Il va falloir:
	Créer des formulaires externalisés pour nos Produit, Category, et Tag
        (Ne pas oublier d'implémenter le champ EntityType pour les associations entre Entity)
    Implémenter les fonctions Create pour chacune de ces Entity de manière à ce que de nouvelles instances d'Entity soient enregistrées dans notre base de données à chaque fois que nous remplissons un formulaire de création. Nous devons toujours utiliser le même fichier twig, que nous allons appeler dataform.html.twig, pour les pages employant le formulaire.
    (Bonus: faire en sorte qu'aucun doublon de nom ne soit ajouté lorsque vous passez à la persistence de l'Entity qui a été renseignée par le formulaire qui vient d'être rempli. En d'autres termes, si une instance d'Entity existe dans la table avec la même variable $name, faire en sorte que l'Entity qui vient d'être créée ne soit pas persistée)
    Implémenter les fonctions updateProduit() et deleteProduit() et faire en sorte que ces fonctions soient appelées au sein de notre backoffice lorsque nous cliquons sur un des boutons proposés avec l'instance de Produit associée.
    
    Créer des tableaux Category et Tag suivant la même logique avec les boutons update() et delete() associés.
========================================================================================================================================================================================================================================================================================================================================================
Créer une nouvelle route, ficheProduit(): cette fonction a pour but d'afficher les informations sur le produit dont nous avons cliqué sur la vignette. ficheProduit() charge une nouvelle page twig, fiche-produit.html.twig
fiche-produit.html.twig:
	- Le corps (block body) de cette page est divisé en deux partie, une première de 2/3 et une seconde de 1/2
    2/3 -> Affiche la photo (placeholder) du Produit, ainsi que le nom, la catégorie, et les tags associés
    1/3 -> Affiche le nom du Produit, sa catégorie, son prix, son stock, sa description, ainsi qu'un bouton "Acheter" de class "w3-black"
Cliquer sur un tag ou une catégorie sur ficheProduit nous ramène vers categoryIndex() ou tagIndex(), lesquels sont des variations de la page d'accueil n'affichant qu'un catalogue centré sur la catégorie ou le tag sélectionné.
Ne pas oublier de créer un lien hypertexte sur index.html.twig liant toute vignette de Produit publiée à sa fiche Produit.
========================================================================================================================================================================================================================================================================================================================================================
Créer une fonction nommée buyProduit(), laquelle est appelée lorsque nous cliquons sur le bouton "Acheter"
La fonction buyProduit n'a pour l'instant qu'un effet, qui est de décrémenter le stock du Produit visé par 1.
Si le stock est à zéro, la décrémentation ne doit pas être possible et le bouton "Acheter" ne doit plus être affiché.
========================================================================================================================================================================================================================================================================================================================================================
Nos nouvelles Entity:

Reservation
	- A pour but de conserver une trace de la référence produit désirée
	- Conserve la quantité demandé et la date de la demande
	- Deux attributs: quantity (Integer) et creationDate (DateTime)
	- Deux Entity liées: Commande (ManyToOne) et Produit (OneToMany)

Commande
	- A pour but de réunir toutes les Réservations de référence produit en un tout cohérent
	- Trois attributs: adresse (Text), statut (String), creationDate (DateTime)
	- Une Entity liée: Reservation (OneToMany)
========================================================================================================================================================================================================================================================================================================================================================
Après avoir créé ClientController, à la manière de notre tableau d'administration, nous allons avoir un backoffice pour les clients, sous le nom de client-dashboard.html.twig, dans le dossier client de notre dossier template.

ClientController doit posséder une méthode offrant un rendu de ce template, nommée clientDashboard(). Cette page web doit proposer:
	Un tableau de la commande active, ainsi qu'un bouton de validation de la commande: ce bouton doit avoir pour effet de faire passer le statut de la commande active de "Panier" à "Validee". La fonction permettant ce changement de statut ne doit fonctionner que pour les commandes en mode Panier.
    Chaque tableau de commande doit présenter la liste des Reservations relatives à cette commande. Chaque Reservation de la Commande active doit posséder un bouton rouge de suppression, permettant de supprimer la Reservation. Si la dernière Reservation d'une Commande est supprimée, la Commande doit également être supprimée. A noter qu'il doit être impossible de supprimer les Reservations d'une Commande validée et que le bouton de suppression ne doit pas être visible pour les entrées des Commandes validées.
        A côté du bouton de validation de la Commande doit coexister un bouton de suppression de la Commande active. Ce bouton a pour effet de supprimer toutes les Reservations de la Commande une par une avant de finir par supprimer la Commande elle-même. Ce bouton ne fonctionne que pour les Commandes en statut "Panier".
    Toutes les méthodes nécessaires pour l'implémentation de ce backoffice client doivent être écrites dans ClientController.
